"use strict";"object"!=typeof window.CP&&(window.CP={}),window.CP.PenTimer={programNoLongerBeingMonitored:!1,timeOfFirstCallToShouldStopLoop:0,_loopExits:{},_loopTimers:{},START_MONITORING_AFTER:2e3,STOP_ALL_MONITORING_TIMEOUT:5e3,MAX_TIME_IN_LOOP_WO_EXIT:2200,exitedLoop:function(o){this._loopExits[o]=!0},shouldStopLoop:function(o){if(this.programKilledSoStopMonitoring)return!0;if(this.programNoLongerBeingMonitored)return!1;if(this._loopExits[o])return!1;var n=this._getTime();if(0===this.timeOfFirstCallToShouldStopLoop)return this.timeOfFirstCallToShouldStopLoop=n,!1;var i=n-this.timeOfFirstCallToShouldStopLoop;if(i<this.START_MONITORING_AFTER)return!1;if(i>this.STOP_ALL_MONITORING_TIMEOUT)return!(this.programNoLongerBeingMonitored=!0);try{this._checkOnInfiniteLoop(o,n)}catch(o){return this._sendErrorMessageToEditor(),this.programKilledSoStopMonitoring=!0}return!1},_sendErrorMessageToEditor:function(){try{if(this._shouldPostMessage()){var o={action:"infinite-loop",line:this._findAroundLineNumber()};parent.postMessage(JSON.stringify(o),"*")}else this._throwAnErrorToStopPen()}catch(o){this._throwAnErrorToStopPen()}},_shouldPostMessage:function(){return document.location.href.match(/boomerang/)},_throwAnErrorToStopPen:function(){throw"We found an infinite loop in your Pen. We've stopped the Pen from running. Please correct it or contact support@codepen.io."},_findAroundLineNumber:function(){var o=new Error,n=0;if(o.stack){var i=o.stack.match(/boomerang\S+:(\d+):\d+/);i&&(n=i[1])}return n},_checkOnInfiniteLoop:function(o,n){if(!this._loopTimers[o])return this._loopTimers[o]=n,!1;if(n-this._loopTimers[o]>this.MAX_TIME_IN_LOOP_WO_EXIT)throw"Infinite Loop found on loop: "+o},_getTime:function(){return+new Date}},window.CP.shouldStopExecution=function(o){return window.CP.PenTimer.shouldStopLoop(o)},window.CP.exitedLoop=function(o){window.CP.PenTimer.exitedLoop(o)},function(e){e.fn.jaliswall=function(t){return this.each(function(){var l=e.extend({item:".wall-item",columnClass:".wall-column",resize:!0},t),u=e(this),o=u.find(l.item),a=[],d=n();function n(){var o=!1;0==u.find(l.columnClass).length&&(o=!0,u.append("<div class='"+c(l.columnClass)+"'></div>"));var n=u.find(l.columnClass).outerWidth(!0),i=u.innerWidth();return o&&u.find(l.columnClass).remove(),Math.round(i/n)}function c(o){return o.slice(1,o.length)}function i(){for(var o="",n=0;n<d&&!window.CP.shouldStopExecution(2);n++)o+="<div class='"+c(l.columnClass)+"'></div>";for(var n in window.CP.exitedLoop(2),u.html(o),a){var i="",t=null!=a[n].content?a[n].content:"",e=a[n].href!=e?a[n].href:"",r=null!=a[n].class?a[n].class:"",s=null!=a[n].id?a[n].id:"";null!=a[n].href?i+="<a "+h(e,"href")+" "+h(r,"class")+" "+h(s,"id")+">"+t+"</a>":i+="<div "+h(r,"class")+" "+h(s,"id")+">"+t+"</a>",u.children(l.columnClass).eq(n%d).append(i)}}function h(o,n){return null!=o?n+"='"+o+"'":""}d=n(),o.each(function(o){var n=e(this);a.push({content:n.html(),class:n.attr("class"),href:n.attr("href"),id:n.attr("id"),colid:o%d}),n.remove()}),i(),l.resize&&e(window).resize(function(){d!=n()&&(d=n(),function(){for(var o in a){if(window.CP.shouldStopExecution(1))break;a[o].colid=o%d}window.CP.exitedLoop(1)}(),i())})}),this}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
