var baguetteBox=function(){var i,a,s,r,t,n,l='<svg width="40" height="60" xmlns="http://www.w3.org/2000/svg" version="1.1"><polyline points="30 10 10 30 30 50" stroke="rgba(255,255,255,0.5)" stroke-width="4"stroke-linecap="butt" fill="none" stroke-linejoin="round">&lt;</polyline></svg>',c='<svg width="40" height="60" xmlns="http://www.w3.org/2000/svg" version="1.1"><polyline points="10 10 30 30 10 50" stroke="rgba(255,255,255,0.5)" stroke-width="4"stroke-linecap="butt" fill="none" stroke-linejoin="round">&gt;</polyline></svg>',u='<svg width="30" height="30" xmlns="http://www.w3.org/2000/svg" version="1.1"><g stroke="rgb(160, 160, 160)" stroke-width="4"><line x1="5" y1="5" x2="25" y2="25"/><line x1="5" y1="25" x2="25" y2="5"/>X</g></svg>',d="baguetteBox-overlay",m="baguetteBox-slider",p={},f={captions:!0,buttons:"auto",async:!1,preload:2,animation:"slideIn"},g=0,y=-1,h=!1,v=[],b=[],E=[];function k(){var e=document.createElement("div");return e.className="full-image",e}function w(){"none"!==i.style.display&&(i.className="",setTimeout(function(){i.style.display="none"},500))}function B(e,t){var n=E[e];if(void 0!==n)if(n.getElementsByTagName("img")[0])t&&t();else{imageElement=b[y][e],imageCaption=imageElement.getAttribute("data-caption")||imageElement.title,imageSrc=function(e){var t=imageElement.getAttribute("href");if(e.dataset){var n=[];for(var o in e.dataset)"at-"!==o.substring(0,3)||isNaN(o.substring(3))||(n[o.replace("at-","")]=e.dataset[o]);keys=Object.keys(n).sort(function(e,t){return parseInt(e)<parseInt(t)?-1:1});for(var i=window.innerWidth*window.devicePixelRatio,a=0;a<keys.length;a++){if(keys[a]>=i){t=n[keys[a]];break}t=n[keys[a]]}}return t}(imageElement);var o=document.createElement("figure"),i=document.createElement("img"),a=document.createElement("figcaption");n.appendChild(o),o.innerHTML='<div class="spinner"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>',i.onload=function(){var e=this.parentNode.querySelector(".spinner");this.parentNode.removeChild(e),!p.async&&t&&t()},i.setAttribute("src",imageSrc),o.appendChild(i),p.captions&&imageCaption&&(a.innerHTML=imageCaption,o.appendChild(a)),p.async&&t&&t()}}function C(){g<=E.length-2?(g++,T(),x(g)):(a.className="bounce-from-right",setTimeout(function(){a.className=""},400))}function N(){1<=g?(g--,T(),I(g)):(a.className="bounce-from-left",setTimeout(function(){a.className=""},400))}function T(){var e=100*-g+"%";"fadeIn"===p.animation?(a.style.opacity=0,setTimeout(function(){p.transforms?a.style.transform=a.style.webkitTransform="translate3d("+e+",0,0)":a.style.left=e,a.style.opacity=1},400)):p.transforms?a.style.transform=a.style.webkitTransform="translate3d("+e+",0,0)":a.style.left=e}function x(e){e-g>=p.preload||B(e+1,function(){x(e+1)})}function I(e){g-e>=p.preload||B(e-1,function(){I(e-1)})}function P(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}return Array.prototype.forEach||(Array.prototype.forEach=function(e,t){for(var n=this.length,o=0;o<n;o++)e.call(t,this[o],o,this)}),{run:function(e,o){!function(){if(i=document.getElementById(d))return a=document.getElementById(m),s=document.getElementById("previous-button"),r=document.getElementById("next-button"),t=document.getElementById("close-button");(i=document.createElement("div")).id=d,document.getElementsByTagName("body")[0].appendChild(i),(a=document.createElement("div")).id=m,i.appendChild(a),(s=document.createElement("button")).id="previous-button",s.innerHTML=l,i.appendChild(s),(r=document.createElement("button")).id="next-button",r.innerHTML=c,i.appendChild(r),(t=document.createElement("button")).id="close-button",t.innerHTML=u,i.appendChild(t),s.className=r.className=t.className="baguetteBox-button",P(i,"click",function(e){e.target&&"IMG"!==e.target.nodeName&&w()}),P(document.getElementById("previous-button"),"click",function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,N()}),P(document.getElementById("next-button"),"click",function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,C()}),P(document.getElementById("close-button"),"click",function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,w()}),P(i,"touchstart",function(e){n=e.changedTouches[0].pageX}),P(i,"touchmove",function(e){h||(e.preventDefault?e.preventDefault():e.returnValue=!1,touch=e.touches[0]||e.changedTouches[0],40<touch.pageX-n?(h=!0,N()):touch.pageX-n<-40&&(h=!0,C()))}),P(i,"touchend",function(e){h=!1}),P(document,"keydown",function(e){switch(e.keyCode){case 37:N();break;case 39:C();break;case 27:w()}})}(),v=document.querySelectorAll(e),[].forEach.call(v,function(e,t){var n=b.length;b.push(e.getElementsByClassName("show-pic")),b[n].options=o,[].forEach.call(b[n],function(e,t){P(e,"click",function(e){e.preventDefault?e.preventDefault():e.returnValue=!1,function(e){if(y===e)return;!function(e){e=e||{};for(var t in f)p[t]=f[t],void 0!==e[t]&&(p[t]=e[t]);a.style.transition=a.style.webkitTransition="fadeIn"===p.animation?"opacity .4s ease":"","auto"===p.buttons&&("ontouchstart"in window||1===b[y].length)&&(p.buttons=!1);s.style.display=r.style.display=p.buttons?"":"none"}(b[y=e].options);for(;a.firstChild;)a.removeChild(a.firstChild);for(var t=E.length=0;t<b[e].length;t++)E.push(k()),a.appendChild(E[t])}(n),function(e){if("block"===i.style.display)return;B(g=e,function(){x(g),I(g)}),T(),i.style.display="block",setTimeout(function(){i.className="visible"},50)}(t)})})}),f.transforms=function(){var e=document.createElement("div");return void 0!==e.style.perspective||void 0!==e.style.webkitPerspective}()}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
